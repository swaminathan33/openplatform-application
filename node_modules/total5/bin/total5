#! /usr/bin/env node

require('total5');

const ARGS = process.argv; // TEST: ['-', '-', 'CMD']
const DIR = process.cwd();
const DIVIDER = '----------------------------------------';

function done(err) {
	err && console.error('ERROR:', err);
	console.timeEnd('[Done]');
}

function load(args) {

	var cmd = (args[2] || '').replace(/-{2,}/g, '');
	var arg = [];
	for (let i = 3; i < args.length; i++)
		arg.push(args[i].trim().replace(/"/g, ''));

	if ((/^\d+$/).test(cmd)) {
		arg.unshift(+cmd);
		cmd = 'server';
	}

	if (!cmd)
		cmd = 'help';

	console.log('* Total.js v5: [' + cmd.capitalize() + ']');
	console.time('[Done]');

	var fn = FUNC[cmd];
	fn && fn.apply(global, arg);
}

setTimeout(load, 10, ARGS);

FUNC.help = function() {
	console.log('translate                : it makes a resource file with a localized dictionary from the current directory');
	console.log('minify <filename>        : it minifies .js, .css and .html files');
	console.log('bundle <filename>        : it makes a bundle from the current directory');
	console.log('extract <filename>       : it extracts a bundle into the current directory');
	console.log('edit <url?id=project>    : it opens remote editing of the current directory with the Total.js Code Editor');
	console.log('8000                     : it starts a web server on port "8000" for the current directory');
	done();
};

FUNC.translate = function(filename) {

	var translate = function(value) {

		var index = -1;
		var dictionary = {};

		while (true) {

			index = value.indexOf('@(', index);

			if (index === -1)
				break;

			var counter = 0;
			for (let i = index + 2; i < value.length; i++) {

				var c = value[i];

				if (c == '(') {
					counter++;
				} else if (c === ')') {

					if (counter) {
						counter--;
						continue;
					}

					let text = value.substring(index, i + 1);
					let translate = text.substring(2, text.length - 1);
					let key = 'T' + translate.hash(true).toString(36);
					dictionary[key] = translate;
					index += text.length - 2;
					break;
				}
			}
		}

		return dictionary;
	};

	var extensions = { html: true, js: true };

	U.ls(DIR, function(files) {

		var dictionary = {};

		for (let filename of files) {
			let ext = U.getExtension(filename);
			if (ext === 'js' || ext === 'html') {
				let body = F.Fs.readFileSync(filename, 'utf8');
				let dict = translate(body);
				for (let key in dict)
					dictionary[key] = dict[key];
			}
		}

		let builder = [];
		for (let key in dictionary)
			builder.push(key.padRight(12, ' ') + ' : ' + dictionary[key]);

		F.Fs.writeFileSync(filename || 'translate.resource', builder.join('\n'), 'utf8');
		done();

	}, (filename, isdir) => isdir ? true : extensions[U.getExtension(filename)]);

};

FUNC.bundle = function(filename) {

	if (!filename)
		filename = 'app.bundle';

	let ignore = {};
	ignore['/bundle.json'] = 1;
	ignore['/debug.js'] = 1;
	ignore['/debug.js.json'] = 1;
	ignore['/debug.pid'] = 1;
	ignore['/release.js'] = 1;
	ignore['/release.js.json'] = 1;
	ignore['/release.pid'] = 1;
	ignore['/index.js'] = 1;
	ignore['/index.js.json'] = 1;
	ignore['/index.pid'] = 1;
	ignore['/package.json'] = 1;
	ignore['/readme.md'] = 1;
	ignore['/license.txt'] = 1;
	ignore['/bundles/'] = 1;
	ignore['/tmp/'] = 1;
	ignore['/.src/'] = 1;

	if (filename[0] !== '/')
		ignore['/' + filename] = 1;
	else
		ignore[filename] = 1;

	ignore['/.git/'] = 1;

	if (filename.toLowerCase().lastIndexOf('.bundle') === -1)
		filename += '.bundle';

	ignore[filename] = 1;
	F.backup(filename, DIR, done, path => ignore[path] == null);
};

FUNC.extract = function(filename) {
	let stats = F.Fs.lstatSync(filename);
	if (stats.isDirectory())
		done();
	else
		F.restore(filename || 'app.bundle', DIR, done);
};

FUNC.minify = function(filename) {

	var ext = U.getExtension(filename).toLowerCase();
	var body = F.Fs.readFileSync(filename, 'utf8');

	switch (ext) {
		case 'js':
			body = U.minify_js(body);
			break;
		case 'css':
			body = U.minify_css(body);
			break;
		case 'html':
			body = U.minify_html(body);
			break;
	}

	var target = filename.replace('.' + ext, '.min.' + ext);
	F.Fs.writeFileSync(target, body, 'utf8');
	console.log(DIVIDER);
	console.log('Filename  :', filename);
	console.log('Output    :', target);
	console.log(DIVIDER);
	done();
};

FUNC.server = function(port) {

	F.config.$dirpublic = DIR;
	F.config.$sourcemap = false;
	F.config.$minifyjs = false;
	F.config.$minifycss = false;
	F.config.$minifyhtml = false;

	ROUTE('GET /*', function($) {

		var dir = PATH.public($.url.substring(1));
		var filename = PATH.join($.url, 'index.html').substring(1);

		PATH.exists(filename, function(e) {

			if (e)
				return $.file(filename, '');

			F.Fs.readdir(dir, function(err, items) {

				var render = function(controller, directories, files) {
					controller.html('<!DOCTYPE html><html><head><title>Directory listing: {0}</title><meta charset="utf-8" /><style>body{font-family:Arial;font-size:16px;padding:10px 30px 30px}a{display:block}.directory:last-child{margin-bottom:10px}.directory{padding:2px 10px;background-color:#F8F8F8;margin-bottom:2px;text-decoration:none;color:black;font-weight:bold;font-size:18px}.directory-back{text-decoration:none;font-size:50px;margin:0 0 10px 5px;color:gray}.file{color:gray;text-decoration:none;font-size:14px;padding:3px 10px;border-bottom:1px solid #F0F0F0;}.file span{float:right;font-size:12px;margin:2px 0 0 0;color:#A0A0A0}.file:hover{background-color:#F8F8F8}</style></head><body><div class="directories">{1}</div><div class="files">{2}</div></body></html>'.format(controller.url, directories.join(''), files.join('')));
				};

				var directories = [];
				var files = [];

				if ($.url !== '/')
					directories.push('<a href=".." class="directory-back">..</a>');

				if (err)
					return render($, directories, files);

				items.wait(function(item, next) {
					var filename = PATH.join(dir, item);
					F.Fs.stat(filename, function(err, info) {

						if (err) {
							next();
							return;
						}

						if (info.isFile())
							files.push('<a href="{1}" class="file">{0}<span>{2}</span></a>'.format(item, $.url + item, info.size.filesize()));
						else
							directories.push('<a href="{1}/" class="directory">{0}</a>'.format(item, $.url + item));
						next();
					});
				}, () => render($, directories, files));
			});

		});
	});

	F.http({ load: 'none', port: port || 8000 });
};

FUNC.edit = function(url) {
	if (!url)
		throw new Error('Invalid URL address');
	require('../edit').init(url);
};